package org.activityinfo.service.blob;

import com.google.common.base.Strings;
import com.sun.jersey.api.core.InjectParam;
import org.activityinfo.model.auth.AuthenticatedUser;

import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;

/**
 * Provides a Restful facade for the {@link org.activityinfo.service.blob.UserBlobService}.
 *
 */
public final class UserBlobRestfulService {

    private final UserBlobService service;

    @Inject
    public UserBlobRestfulService(UserBlobService service) {
        this.service = service;
    }


    /**
     * Creates the metadata record for the blob identified by {@code blobId} and
     * provides a signed URL and a set of credentials that will allow the user
     * to upload the contents of the blob directly to GCS.
     *
     * @param user
     * @param blobId   the id of the blob to be uploaded, generated by the client
     * @param filename the filename of the object to be uploaded
     * @return a set of credentials that the browser can use to upload the files
     */
    @POST
    public UploadCredentials startUpload(
        @InjectParam AuthenticatedUser user,
        @FormParam("blobId") BlobId blobId,
        @FormParam("filename") String filename) {

        if (blobId == null || Strings.isNullOrEmpty(filename)) {
            throw new WebApplicationException(Response
                .status(Response.Status.BAD_REQUEST)
                .entity("The blobId and filename parameters are required as form parameters.")
                .build());
        }

        return service.startUpload(user, BlobMetadata.attachment(blobId, filename));
    }

    @Path("{blobId}")
    public BlobResource getBlob(@InjectParam AuthenticatedUser user, @PathParam("blobId") BlobId blobId) {
        return new BlobResource(service, user, blobId);
    }
}
