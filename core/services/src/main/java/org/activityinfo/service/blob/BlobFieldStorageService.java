package org.activityinfo.service.blob;

import com.google.common.io.ByteSource;
import com.sun.jersey.api.core.InjectParam;
import org.activityinfo.model.auth.AuthenticatedUser;

import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import java.io.IOException;

/**
 * Provides storage for fields which have blob values, such as images
 * or general attachment fields.
 */
@Path("/service/blob")
public interface BlobFieldStorageService {


    /**
     * Creates the metadata record for the blob identified by {@code blobId} and
     * provides a signed URL and a set of credentials that will allow the user
     * to upload the contents of the blob directly to GCS.
     *
     * @param user
     * @param blobId the id of the blob to be uploaded, generated by the client
     * @param fileName the filename of the object to be uploaded
     * @return
     */
    @POST
    public UploadCredentials startUpload(
        @InjectParam AuthenticatedUser user,
        @PathParam("blobId") BlobId blobId,
        @FormParam("filename") String fileName);


    /**
     * Creates a metadata record for the new {@code blobId} and writes
     * the content directly to the blob store.
     * @param user
     * @param blobId
     * @param contentDisposition
     * @param mimeType
     * @param byteSource
     * @throws IOException
     */
    public void put(
        AuthenticatedUser user,
        BlobId blobId,
        String contentDisposition,
        String mimeType,
        ByteSource byteSource) throws IOException;


    @Path("{blobId}")
    public BlobResource getBlob(@InjectParam AuthenticatedUser user, @PathParam("blobId") BlobId blobId);



}
